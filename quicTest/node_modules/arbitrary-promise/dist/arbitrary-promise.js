(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["arbitraryPromise"] = factory();
	else
		root["arbitraryPromise"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ArbitraryPromise = function () {
	  function ArbitraryPromise(passReceivePairs) {
	    _classCallCheck(this, ArbitraryPromise);
	
	    if (!this._validatePassReceivePairs(passReceivePairs)) throw new Error("must pass in tuples of function names like [['handleData', 'onData'], ...]");
	
	    this._createState();
	
	    passReceivePairs.forEach(this._processPassReceivePair.bind(this));
	  }
	
	  // Remove all state. Useful for applications making heavy repeated use
	  // of single promises.
	
	
	  _createClass(ArbitraryPromise, [{
	    key: 'clear',
	    value: function clear() {
	      this._resetState();
	    }
	  }, {
	    key: '_createState',
	    value: function _createState() {
	      this._state = {};
	    }
	  }, {
	    key: '_resetState',
	    value: function _resetState() {
	      var _this = this;
	
	      Object.keys(this._state).forEach(function (stateKey) {
	        _this._state[stateKey] = [];
	      });
	    }
	  }, {
	    key: '_processPassReceivePair',
	    value: function _processPassReceivePair(pair) {
	      var _this2 = this;
	
	      var _pair = _slicedToArray(pair, 2),
	          pass = _pair[0],
	          receive = _pair[1];
	
	      var stateKey = '__state_' + pass;
	      var handlerKey = '__handler_' + receive;
	
	      // This will contain the data from every pass call
	      this._state[stateKey] = [];
	
	      this[receive] = function (handler) {
	        // set local handler for pass funk to call
	        _this2[handlerKey] = handler;
	
	        // Get all data previously called from pass funk
	        _this2._state[stateKey].forEach(function (args) {
	          return handler.apply(undefined, _toConsumableArray(args));
	        });
	
	        // return this for chaining
	        return _this2;
	      };
	
	      this[pass] = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }
	
	        // Save data for future receive assignments to get
	        _this2._state[stateKey].push(args);
	
	        // Call receive function with data
	        _this2[handlerKey] && _this2[handlerKey].apply(_this2, args);
	
	        // return this for chaining
	        return _this2;
	      };
	    }
	  }, {
	    key: '_validatePassReceivePairs',
	    value: function _validatePassReceivePairs(passReceivePairs) {
	      var isArray = Array.isArray(passReceivePairs);
	      if (!isArray) return false;
	
	      var hasSomeEntries = passReceivePairs.length >= 1;
	      if (!hasSomeEntries) return false;
	
	      var isTuples = passReceivePairs.every(function (pair) {
	        return pair.length === 2;
	      });
	      if (!isTuples) return false;
	
	      var areStrings = passReceivePairs.every(function (pair) {
	        return typeof pair[0] === 'string' && typeof pair[1] === 'string';
	      });
	      if (!areStrings) return false;
	
	      return true;
	    }
	  }]);
	
	  return ArbitraryPromise;
	}();
	
	module.exports = ArbitraryPromise;

/***/ })
/******/ ])
});
;
//# sourceMappingURL=arbitrary-promise.js.map