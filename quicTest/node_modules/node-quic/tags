!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDRESS	speed-comparison/speed-comparison.js	/^      client.connect(port, ADDRESS, () => {$/;"	r
ADDRESS	speed-comparison/speed-comparison.js	/^      quic.send(port, ADDRESS, { data })$/;"	r
ADDRESS	speed-comparison/speed-comparison.js	/^  server.listen(netPort, ADDRESS, () => {$/;"	r
ADDRESS	speed-comparison/speed-comparison.js	/^ *    address, ADDRESS, and DATA_SIZE (0 is a short string.)$/;"	r
NUM_SPINUPS	speed-comparison/speed-comparison.js	/^    NUM_SPINUPS, START_PORT, ADDRESS, DATA_SIZE,$/;"	r
Quic	lib/index.js	/^  function Quic() {$/;"	r
Quic	lib/index.js	/^var Quic = function () {$/;"	r
START_PORT	speed-comparison/speed-comparison.js	/^ *    port, START_PORT, for listening \/ sending$/;"	r
_arbitraryPromise	lib/index.js	/^var _arbitraryPromise = require('arbitrary-promise');$/;"	r
_arbitraryPromise2	lib/index.js	/^var _arbitraryPromise2 = _interopRequireDefault(_arbitraryPromise);$/;"	r
_classCallCheck	lib/index.js	/^function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }$/;"	r
_createClass	lib/index.js	/^var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();$/;"	r
_interopRequireDefault	lib/index.js	/^function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }$/;"	r
_quic	lib/index.js	/^var _quic = require('quic');$/;"	r
_server	lib/index.js	/^      this._server = new _quic.Server();$/;"	r
_server	src/index.js	/^    this._server = new Server()$/;"	r
_server	src/index.js	/^    this._server$/;"	r
_sleep	speed-comparison/speed-comparison.js	/^async function _sleep (duration) {$/;"	r
_typeof	lib/index.js	/^var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };$/;"	r
address	lib/index.js	/^      var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'localhost';$/;"	r
address	lib/index.js	/^    value: function send(port, address, data) {$/;"	r
address	src/index.js	/^  listen(port, address = 'localhost') {$/;"	r
address	src/index.js	/^  send(port, address, data) {$/;"	r
address	test/module.spec.js	/^                  sendPromise = quic.send(port, address, data).onError(done)$/;"	r
address	test/module.spec.js	/^              quic.send(port, address, data)$/;"	r
address	test/module.spec.js	/^          quic.send(port, address, data)$/;"	r
address	test/module.spec.js	/^        fullData.split('').forEach(data => quic.send(port, address, data))$/;"	r
args	test/module.spec.js	/^          let args = null$/;"	r
body	speed-comparison/speed-comparison.js	/^        body: data,$/;"	r
buffer	lib/index.js	/^          var buffer = void 0;$/;"	r
buffer	lib/index.js	/^        var buffer = void 0;$/;"	r
buffer	speed-comparison/speed-comparison.js	/^      let buffer$/;"	r
buffer	src/index.js	/^            let buffer$/;"	r
buffer	src/index.js	/^      let buffer$/;"	r
called	test/module.spec.js	/^          let called = false$/;"	r
client	lib/index.js	/^      var client = new _quic.Client();$/;"	r
configurable	lib/index.js	/^var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();$/;"	r
continue	speed-comparison/speed-comparison.js	/^        continue$/;"	r
convertToSendType	lib/index.js	/^var convertToSendType = function convertToSendType(data) {$/;"	r
convertedData	lib/index.js	/^              var convertedData = convertToSendType(data);$/;"	r
convertedData	lib/index.js	/^      var convertedData = convertToSendType(data);$/;"	r
dat	speed-comparison/speed-comparison.js	/^      client.on('data', dat => {$/;"	r
dat	speed-comparison/speed-comparison.js	/^    socket.on('data', dat => {$/;"	r
dat	test/module.spec.js	/^          dat = JSON.parse(dat)$/;"	r
data	speed-comparison/speed-comparison.js	/^    let data$/;"	r
data	speed-comparison/speed-comparison.js	/^  let data = ''$/;"	r
data	src/index.js	/^              .on('data', data => {$/;"	r
data	src/index.js	/^        .on('data', data => {$/;"	r
defaul	lib/index.js	/^      var defaul = { port: 0, family: '', address: '' };$/;"	r
defineProperties	lib/index.js	/^var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();$/;"	r
done	test/module.spec.js	/^            it('writes data back to sender', done => {$/;"	r
done	test/module.spec.js	/^        it('is called when the server cannot start', done => {$/;"	r
done	test/module.spec.js	/^        it('is called when the server starts', done => {$/;"	r
done	test/module.spec.js	/^        it('is called when there is an error', done => {$/;"	r
done	test/module.spec.js	/^        it('passes error argument', done => {$/;"	r
done	test/module.spec.js	/^      it('removes server object from prototype', done => {$/;"	r
done	test/module.spec.js	/^    it('defaults ip to localhost', done => {$/;"	r
done	test/module.spec.js	/^    it('does not stringify given strings', done => {$/;"	r
done	test/module.spec.js	/^    it('handles countless sends', done => {$/;"	r
done	test/module.spec.js	/^    it('includes buffers', done => {$/;"	r
done	test/module.spec.js	/^    it('requires port argument', done => {$/;"	r
done	test/module.spec.js	/^    it('requires three parameters', done => {$/;"	r
done	test/module.spec.js	/^    it('stringifies non-string objects', done => {$/;"	r
done	test/module.spec.js	/^    it('takes and assigns ip argument', done => {$/;"	r
done	test/module.spec.js	/^    it('works twice', done => {$/;"	r
err	lib/index.js	/^            return rejectPromise(promise, err, 'server stream error');$/;"	r
err	lib/index.js	/^          return rejectPromise(promise, err, 'client stream error');$/;"	r
err	lib/index.js	/^          return rejectPromise(promise, err, 'server session error');$/;"	r
err	lib/index.js	/^        rejectPromise(promise, err, 'client error');$/;"	r
err	lib/index.js	/^        return rejectPromise(promise, err, 'server error');$/;"	r
err	lib/index.js	/^var rejectPromise = function rejectPromise(promise, err, message) {$/;"	r
err	src/index.js	/^              .on('error', err => rejectPromise(promise, err, 'server stream error'))$/;"	r
err	src/index.js	/^          .on('error', err => rejectPromise(promise, err, 'server session error'))$/;"	r
err	src/index.js	/^        .on('error', err => rejectPromise(promise, err, 'client stream error'))$/;"	r
err	src/index.js	/^      .on('error', err => rejectPromise(promise, err, 'server error'))$/;"	r
err	src/index.js	/^      rejectPromise(promise, err, 'client error')$/;"	r
err	src/index.js	/^    client.on('error', err => {$/;"	r
err	src/index.js	/^const rejectPromise = (promise, err, message) => {$/;"	r
exports	lib/index.js	/^module.exports = new Quic();/;"	r
exports	src/index.js	/^module.exports = new Quic()$/;"	r
family	lib/index.js	/^      var defaul = { port: 0, family: '', address: '' };$/;"	r
family	src/index.js	/^    const defaul = { port: 0, family: '', address: '' }$/;"	r
flag	speed-comparison/speed-comparison.js	/^    fs.writeFileSync(OUTFILE, JSON.stringify(ret), { encoding: 'utf8', flag: 'a' })$/;"	r
getAddress	lib/index.js	/^    value: function getAddress() {$/;"	r
getServer	lib/index.js	/^    value: function getServer() {$/;"	r
http	speed-comparison/speed-comparison.js	/^  http: (port, data) => {$/;"	r
httpHigh	speed-comparison/speed-comparison.js	/^    httpHigh: _calculateHigh(trimmedHttpResponses),$/;"	r
httpHighFive	speed-comparison/speed-comparison.js	/^    httpHighFive: _getHighFive(sortedHttpResponses),$/;"	r
httpLow	speed-comparison/speed-comparison.js	/^    httpLow: _calculateLow(trimmedHttpResponses),$/;"	r
httpLowFive	speed-comparison/speed-comparison.js	/^    httpLowFive: _getLowFive(sortedHttpResponses),$/;"	r
httpMean	speed-comparison/speed-comparison.js	/^    httpMean: _calculateMean(trimmedHttpResponses),$/;"	r
httpMedian	speed-comparison/speed-comparison.js	/^    httpMedian: _calculateMedian(trimmedHttpResponses),$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^        runAsServer(quicPort, httpPort, wsPort, netPort)$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^      const [ quicPort, httpPort, wsPort, netPort ] = [p, p + 1, p + 2, p + 3]$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^      responsePromises.push(runAsClientParallel(quicPort, httpPort, wsPort, netPort))$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^      return runAsServer(quicPort, httpPort, wsPort, netPort)$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^    const [ quicPort, httpPort, wsPort, netPort ] = [p, p + 1, p + 2, p + 3]$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^    httpPort,$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^const runAsClientParallel = (quicPort, httpPort, wsPort, netPort) => {$/;"	r
httpPort	speed-comparison/speed-comparison.js	/^const runAsServer = (quicPort, httpPort, wsPort, netPort) => {$/;"	r
httpPromise	speed-comparison/speed-comparison.js	/^  return Promise.all([quicPromise, httpPromise, wsPromise, netPromise])$/;"	r
httpResponses	speed-comparison/speed-comparison.js	/^    httpResponses: JSON.stringify(trimmedHttpResponses),$/;"	r
httpStdDev	speed-comparison/speed-comparison.js	/^    httpStdDev: _calculateStdDev(trimmedHttpResponses),$/;"	r
json	speed-comparison/speed-comparison.js	/^        json: true$/;"	r
key	lib/index.js	/^    key: 'getAddress',$/;"	r
key	lib/index.js	/^    key: 'getServer',$/;"	r
key	lib/index.js	/^    key: 'listen',$/;"	r
key	lib/index.js	/^    key: 'send',$/;"	r
key	lib/index.js	/^    key: 'stopListening',$/;"	r
listen	lib/index.js	/^    value: function listen(port) {$/;"	r
main	speed-comparison/speed-comparison.js	/^async function main () {$/;"	r
message	lib/index.js	/^          var message = '';$/;"	r
message	lib/index.js	/^        var message = '';$/;"	r
message	speed-comparison/speed-comparison.js	/^      ws.on('message', message => {$/;"	r
message	src/index.js	/^            let message = ''$/;"	r
message	src/index.js	/^      let message = ''$/;"	r
method	speed-comparison/speed-comparison.js	/^        method: 'POST',$/;"	r
modify	speed-comparison/speed-comparison.js	/^ *  * To change number of servers\/clients, modify$/;"	r
net	speed-comparison/speed-comparison.js	/^  net: (port, data) => {$/;"	r
netHigh	speed-comparison/speed-comparison.js	/^    netHigh: _calculateHigh(trimmedNetResponses),$/;"	r
netHighFive	speed-comparison/speed-comparison.js	/^    netHighFive: _getHighFive(sortedWSResponses),$/;"	r
netLow	speed-comparison/speed-comparison.js	/^    netLow: _calculateLow(trimmedNetResponses),$/;"	r
netLowFive	speed-comparison/speed-comparison.js	/^    netLowFive: _getLowFive(sortedWSResponses)$/;"	r
netMean	speed-comparison/speed-comparison.js	/^    netMean: _calculateMean(trimmedNetResponses),$/;"	r
netMedian	speed-comparison/speed-comparison.js	/^    netMedian: _calculateMedian(trimmedNetResponses),$/;"	r
netResponses	speed-comparison/speed-comparison.js	/^    netResponses: JSON.stringify(trimmedNetResponses),$/;"	r
netStdDev	speed-comparison/speed-comparison.js	/^    netStdDev: _calculateStdDev(trimmedNetResponses),$/;"	r
oldWrite	lib/index.js	/^            var oldWrite = stream.write.bind(stream);$/;"	r
promise	lib/index.js	/^      var promise = new _arbitraryPromise2.default([['resolve', 'then'], ['reject', 'onError'], ['handleData', 'onData']]);$/;"	r
promise	test/module.spec.js	/^          promise$/;"	r
promise	test/module.spec.js	/^        promise = quic.listen(1234).then(done).onError(done)$/;"	r
promise	test/module.spec.js	/^      let promise$/;"	r
protoProps	lib/index.js	/^var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();$/;"	r
quic	speed-comparison/speed-comparison.js	/^  quic: (port, data) => {$/;"	r
quic	test/module.spec.js	/^    quic = require('..\/src\/index')$/;"	r
quic	test/module.spec.js	/^let quic = require('..\/src\/index')$/;"	r
quicHigh	speed-comparison/speed-comparison.js	/^    quicHigh: _calculateHigh(trimmedQuicResponses),$/;"	r
quicHighFive	speed-comparison/speed-comparison.js	/^    quicHighFive: _getHighFive(sortedQuicResponses),$/;"	r
quicLow	speed-comparison/speed-comparison.js	/^    quicLow: _calculateLow(trimmedQuicResponses),$/;"	r
quicLowFive	speed-comparison/speed-comparison.js	/^    quicLowFive: _getLowFive(sortedQuicResponses),$/;"	r
quicMean	speed-comparison/speed-comparison.js	/^    quicMean: _calculateMean(trimmedQuicResponses),$/;"	r
quicMedian	speed-comparison/speed-comparison.js	/^    quicMedian: _calculateMedian(trimmedQuicResponses),$/;"	r
quicPort	speed-comparison/speed-comparison.js	/^    responsePromises = await runAsClientSerially(NUM_SPINUPS, quicPort, httpPort, wsPort, netPort)$/;"	r
quicPort	speed-comparison/speed-comparison.js	/^const runAsClientSerially = async (numSends, quicPort, httpPort, wsPort, netPort) => {$/;"	r
quicResponses	speed-comparison/speed-comparison.js	/^    quicResponses: JSON.stringify(trimmedQuicResponses),$/;"	r
quicStdDev	speed-comparison/speed-comparison.js	/^    quicStdDev: _calculateStdDev(trimmedQuicResponses),$/;"	r
receivedData	test/module.spec.js	/^                  receivedData = data$/;"	r
receivedData	test/module.spec.js	/^          let receivedData$/;"	r
receivedStream	test/module.spec.js	/^                  receivedStream = stream$/;"	r
receivedStream	test/module.spec.js	/^          let receivedStream$/;"	r
recomposedData	test/module.spec.js	/^      let recomposedData = ''$/;"	r
rejectPromise	lib/index.js	/^var rejectPromise = function rejectPromise(promise, err, message) {$/;"	r
resp	speed-comparison/speed-comparison.js	/^        resp = resp.body$/;"	r
responsePromises	speed-comparison/speed-comparison.js	/^    responsePromises = await runAsClientSerially(NUM_SPINUPS, quicPort, httpPort, wsPort, netPort)$/;"	r
responsePromises	speed-comparison/speed-comparison.js	/^  let responsePromises = []$/;"	r
responsePromises	speed-comparison/speed-comparison.js	/^  let responsePromises = [resolvedPromise]$/;"	r
returnedBuffer	test/module.spec.js	/^                  returnedBuffer = buffer$/;"	r
returnedBuffer	test/module.spec.js	/^        let returnedBuffer$/;"	r
returnedData	test/module.spec.js	/^                  returnedData = dat$/;"	r
returnedData	test/module.spec.js	/^              returnedData = dat$/;"	r
returnedData	test/module.spec.js	/^        let returnedData$/;"	r
returnedData	test/module.spec.js	/^    let returnedData$/;"	r
roundPromises	speed-comparison/speed-comparison.js	/^    let roundPromises = []$/;"	r
send	lib/index.js	/^    value: function send(port, address, data) {$/;"	r
sendPromise	test/module.spec.js	/^                  sendPromise = quic.send(port, address, data).onError(done)$/;"	r
sendPromise	test/module.spec.js	/^          let sendPromise$/;"	r
session	src/index.js	/^        session$/;"	r
session	src/index.js	/^      .on('session', session => {$/;"	r
socket	speed-comparison/speed-comparison.js	/^  const server = net.createServer({ allowHalfOpen: true }, socket => {$/;"	r
stopListening	lib/index.js	/^    value: async function stopListening() {$/;"	r
stream	lib/index.js	/^            promise.handleData(message, stream, buffer);$/;"	r
stream	lib/index.js	/^        var stream = client.request();$/;"	r
stream	src/index.js	/^                promise.handleData(message, stream, buffer)$/;"	r
stream	src/index.js	/^            stream$/;"	r
stream	src/index.js	/^          .on('stream', stream => {$/;"	r
stream	src/index.js	/^      stream$/;"	r
stream	test/module.spec.js	/^        .onData((dat, stream, buffer) => {$/;"	r
uri	speed-comparison/speed-comparison.js	/^        uri: `http:\/\/${ADDRESS}:${port}\/test`,$/;"	r
value	lib/index.js	/^    value: async function stopListening() {$/;"	r
value	lib/index.js	/^    value: function getAddress() {$/;"	r
value	lib/index.js	/^    value: function getServer() {$/;"	r
value	lib/index.js	/^    value: function listen(port) {$/;"	r
value	lib/index.js	/^    value: function send(port, address, data) {$/;"	r
write	lib/index.js	/^            stream.write = function (data) {$/;"	r
write	src/index.js	/^                stream.write = data => {$/;"	r
ws	speed-comparison/speed-comparison.js	/^  ws: (port, data) => {$/;"	r
ws	speed-comparison/speed-comparison.js	/^  wss.on('connection', ws => ws.on('message', ws.send)) \/\/ bounce it back$/;"	r
wsHigh	speed-comparison/speed-comparison.js	/^    wsHigh: _calculateHigh(trimmedWSResponses),$/;"	r
wsHighFive	speed-comparison/speed-comparison.js	/^    wsHighFive: _getHighFive(sortedWSResponses),$/;"	r
wsLow	speed-comparison/speed-comparison.js	/^    wsLow: _calculateLow(trimmedWSResponses),$/;"	r
wsLowFive	speed-comparison/speed-comparison.js	/^    wsLowFive: _getLowFive(sortedWSResponses),$/;"	r
wsMean	speed-comparison/speed-comparison.js	/^    wsMean: _calculateMean(trimmedWSResponses),$/;"	r
wsMedian	speed-comparison/speed-comparison.js	/^    wsMedian: _calculateMedian(trimmedWSResponses),$/;"	r
wsResponses	speed-comparison/speed-comparison.js	/^    wsResponses: JSON.stringify(trimmedWSResponses),$/;"	r
wsStdDev	speed-comparison/speed-comparison.js	/^    wsStdDev: _calculateStdDev(trimmedWSResponses),$/;"	r
